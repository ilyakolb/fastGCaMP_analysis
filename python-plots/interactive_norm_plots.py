# -*- coding: utf-8 -*-
'''
load and plot data generated by normPlots.m MATLAB file using plotly

normPlots.mat: contains normPlots_struct and nAP

normPlots_struct:
dtype([('construct', 'O'), ('dff_mean', 'O'), ('dff_sterr', 'O'), ('SNR_mean', 'O'), ('SNR_sterr', 'O'), ('halfrise_mean', 'O'), ('halfrise_sterr', 'O'), ('timetopeak_mean', 'O'), ('timetopeak_sterr', 'O'), ('halfdecay_mean', 'O'), ('halfdecay_sterr', 'O')])

total 5 plots to generate

@todo:
    multi row subplots
    
'''
import numpy as np
from scipy.io import loadmat
import plotly.graph_objects as go
import plotly.io as pio
from plotly.subplots import make_subplots
import plotly.express as px

n_subplots= 5

pio.templates.default = "plotly_white"

subplot_titles = []
fig = make_subplots(rows=1, cols=5, subplot_titles=subplot_titles, x_title='Time (s)') 

plot_mat = loadmat(r'..\normPlots.mat')

nAPs = plot_mat['nAPs'][0]

all_norm_plots = plot_mat['normPlots_struct'][0]

for i,c in enumerate(all_norm_plots):
    construct_name = c['construct']
    
    for j in range(1,n_subplots):
        fig.add_trace(go.Scatter(
            x=nAPs,
            y=c[2*j-1].squeeze(),
            error_y=dict(
                type='data', # value of error bar given in data coordinates
                array=c[2*j].squeeze(),
                visible=True)
        ), row=1,
        col=j)
    
fig.show()
fig.write_html('interactive_norm_plots.html', auto_open=True)

